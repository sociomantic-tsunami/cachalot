#!/usr/bin/env python3
# Copyright sociomantic labs GmbH 2017.
# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE.txt or copy at
# http://www.boost.org/LICENSE_1_0.txt)

import sys, re
from subprocess import check_call, check_output, STDOUT, CalledProcessError


def main(argv):
    tool_name, pkg, version = parse_args(argv, ('run-tests', 'apt', 'gem'))
    if tool_name == 'run-tests':
        run_tests()
        return
    elif tool_name == 'apt':
        tool = AptTool()
    elif tool_name == 'gem':
        tool = GemTool()
    versions = tool.get_versions(pkg)
    if not versions:
        die(1, "No versions found in {} for {}", tool_name, pkg)
    chosen_version = tool.pick_version(versions, version)
    if not chosen_version:
        die(1, "No versions compatible with {} found in {} for {}",
                version, tool_name, pkg)
    sys.stdout.write(chosen_version + "\n")


class Tool:
    name = None
    def pick_version(self, versions, version):
        if version.endswith('.x'):
            version = version[:-1]
        versions = [v for v in versions if v.startswith(version)]
        return versions[0] if versions else ''


class AptTool (Tool):
    name = 'apt'
    def get_versions(self, pkg):
        output = self.get_tool_output(pkg)
        versions = [self.AptVersion(l.strip()) for l in output.splitlines()]
        return [v.version for v in sorted(frozenset(versions), reverse=True)]
    def get_tool_output(self, pkg):
        cmd = "apt-cache madison " + pkg
        try:
            output = check_output(cmd.split(), stderr=STDOUT)
        except CalledProcessError as e:
            die(1, "The commmand `{}` returned {}: {}", cmd, e.returncode,
                    e.output)
        return output.decode()
    class AptVersion:
        def __init__(self, madison_line):
            # madison_line has the format (for example):
            #   git | 1:2.13.0-0ppa1~ubuntu16.04.1 | http://ppa.launchpad.net/git-core/candidate/ubuntu xenial/main amd64 Packages
            #   git | 1:2.13.0-0ppa1~ubuntu16.04.1 | http://ppa.launchpad.net/git-core/ppa/ubuntu xenial/main Sources
            pkg, _, version, _, url, repo, rest = madison_line.split(maxsplit=6)
            rest = rest.split()
            self.pkg = pkg
            self.version = version
            self.url = url
            self.dist, self.component = repo.split('/', 1)
            if len(rest) > 1:
                self.arch = rest[0]
                del rest[0]
            else:
                self.arch = None
            self.pkg_type = rest[0]
        def cmp(a, b):
            a = a.version
            b = b.version
            for op, ret in dict(lt=-1, gt=1).items():
                cmd = ["dpkg", "--compare-versions", a, op, b]
                try:
                    check_call(cmd)
                    return ret
                except CalledProcessError as e:
                    # 1 is OK, it means is false. Any other return is an error.
                    if e.returncode != 1:
                        die(1, "The command `{}` returned {}", ' '.join(cmd),
                                e.returncode)
            # If they are equals, we just return a normal lexical compare
            return (a > b) - (a < b)
        def __lt__(self, b):
            return self.cmp(b) < 0
        def __gt__(self, b):
            return self.cmp(b) > 0
        def __eq__(self, b):
            return self.cmp(b) == 0
        def __hash__(self):
            return hash(self.version)
        def __repr__(self):
            return 'AptVersion(pkg={v.pkg!r}, version={v.version!r}, ' \
                    'url={v.url!r}, dist={v.dist!r},' \
                    ' component={v.component!r}, arch={v.arch!r}, ' \
                    'pkg_type={v.pkg_type!r})'.format(v=self)


class GemTool (Tool):
    name = 'gem'
    def get_versions(self, pkg):
        output = self.get_tool_output(pkg)
        for l in output.splitlines():
            # Line with versions is like:
            # fpm (1.8.1, 1.8.0, 1.7.0, 1.6.1, 1.6.0)
            if l.startswith(pkg):
                l = l[len(pkg)+2:-1] # +2 for " (", -1 for ")"
                return l.split(', ')
        return []
    def get_tool_output(self, pkg):
        cmd = "gem list -ra ^{}$".format(pkg)
        try:
            output = check_output(cmd.split(), stderr=STDOUT)
        except CalledProcessError as e:
            die(1, "The commmand `{}` returned {}: {}", cmd, e.returncode,
                    e.output)
        return output.decode()


def parse_args(argv, tools):
    def args_error(fmt, *args, **kwargs):
        die(2, """\
Find the latest available version of a package that matches a criteria for the
version.

Usage: {} TOOL PKG [VERSION]

Where TOOL is the tool to use (for now 'apt' or 'gem'), PKG is the name of the
package and for a version to be considered it needs to contain VERSION. If
VERSION ends with ".x" then this is treated specially an the version will only
match if it begins to what VERSION contains right before the "x" (so "1.6.x"
        means searching for "^1\.6\..*" as a matching version).

If VERSION is not specified, the last version is returned.

Error: {}.""", argv[0], fmt.format(*args, **kwargs))

    # If we are running tests just continue without any further checks
    try:
        if argv[1] == tools[0]:
            return argv[1], '', ''
    except:
        pass

    if len(argv) not in (3, 4):
        args_error("Wrong number of arguments")

    if argv[1] not in tools:
        args_error("Unknown tool {!r}, tool should be one of {!r}",
                argv[1], tools)

    return argv[1], argv[2], argv[3] if len(argv) > 3 else ''


class ExitError (SystemExit):
    def __init__(self, statuscode, message):
        SystemExit.__init__(self, statuscode)
        self.statuscode = statuscode
        self.message = message
    def __repr__(self):
        return 'ExitError(statuscode={!r}, message={!r})'.format(
                self.statuscode, self.message)
    def check(self, other):
        return self.statuscode == other.statuscode and \
                self.message == other.message


def die(statuscode, fmt, *args, **kwargs):
    raise ExitError(statuscode, fmt.format(*args, **kwargs))


def run_tests():

    def fail(cmd, expected, obtained, fmt='', *args, **kwargs):
        msg = "Test failed: command {!r} expected {!r} but got {!r}".format(
                cmd, expected, obtained)
        if fmt:
            msg += '. '
        die(3,  msg + fmt.format(*args, **kwargs))

    def run_test(cmd, expected, transform_error_message=lambda m: m):
        import io
        sys.stdout = io.StringIO()
        cmd = [sys.argv[0]] + cmd
        try:
            main(cmd)
        except ExitError as error:
            if isinstance(expected, ExitError):
                error.message = transform_error_message(error.message)
                if not expected.check(error):
                    fail(cmd, expected, error)
            else:
                fail(cmd, expected, error)
        else:
            obtained = sys.stdout.getvalue()
            if isinstance(expected, ExitError):
                fail(cmd, expected, obtained)
            expected = expected + '\n'
            if obtained != expected:
                fail(cmd, expected, obtained)

    # Simple invocation tests
    command_failure_tests = (
        ([], ExitError(2, "Error: Wrong number of arguments.")),
        (['apt'], ExitError(2, "Error: Wrong number of arguments.")),
        (['gem'], ExitError(2, "Error: Wrong number of arguments.")),
        (['no-tool', 'pkg', '1.0'], ExitError(2, "Error: Unknown tool "
            "'no-tool', tool should be one of ('run-tests', 'apt', 'gem').")),
    )

    for cmd, expected in command_failure_tests:
        # Get just the last line of the error message
        run_test(cmd, expected, lambda m: m.splitlines()[-1])

    # tools tests checking versions
    tool_tests = {
        'apt': {
            'git': {
                'versions': (
                    ('1:2.7.x', '1:2.7.4-0ubuntu1.1'),
                    ('1:2.13', '1:2.13.0-0ppa1~ubuntu16.04.1'),
                    ('', '1:2.13.0-0ppa1~ubuntu16.04.1'),
                    ('2.13', ExitError(1, 'No versions compatible with 2.13 found in apt for git')),
                ),
                'output': '''\
       git | 1:2.13.0-0ppa1~ubuntu16.04.1 | http://ppa.launchpad.net/git-core/candidate/ubuntu xenial/main amd64 Packages
       git | 1:2.13.0-0ppa1~ubuntu16.04.1 | http://ppa.launchpad.net/git-core/ppa/ubuntu xenial/main amd64 Packages
       git | 1:2.7.4-0ubuntu1.1 | http://de.archive.ubuntu.com/ubuntu xenial-updates/main amd64 Packages
       git | 1:2.7.4-0ubuntu1.1 | http://security.ubuntu.com/ubuntu xenial-security/main amd64 Packages
       git | 1:2.7.4-0ubuntu1 | http://de.archive.ubuntu.com/ubuntu xenial/main amd64 Packages
       git | 1:2.7.4-0ubuntu1 | http://de.archive.ubuntu.com/ubuntu xenial/main Sources
       git | 1:2.7.4-0ubuntu1.1 | http://de.archive.ubuntu.com/ubuntu xenial-updates/main Sources
       git | 1:2.7.4-0ubuntu1.1 | http://security.ubuntu.com/ubuntu xenial-security/main Sources
       git | 1:2.13.0-0ppa1~ubuntu16.04.1 | http://ppa.launchpad.net/git-core/candidate/ubuntu xenial/main Sources
       git | 1:2.13.0-0ppa1~ubuntu16.04.1 | http://ppa.launchpad.net/git-core/ppa/ubuntu xenial/main Sources
''',
            },
            'libtangort-dmd-dev': {
                'versions': (
                    ('1.6.x', '1.6.1+11~b25c793-xenial'),
                    ('1.6.1', '1.6.1+11~b25c793-xenial'),
                    ('1.7', '1.7.0-xenial'),
                    ('1.x', '1.8.0-alpha1-xenial'),
                    ('', '1.8.0-alpha1-xenial'),
                    ('1.6.2', ExitError(1, 'No versions compatible with 1.6.2 found in apt for libtangort-dmd-dev')),
                ),
                'output': '''\
libtangort-dmd-dev | 1.8.0-alpha1-xenial | https://dl.bintray.com/sociomantic-tsunami/dlang xenial/prerelease amd64 Packages
libtangort-dmd-dev | 1.7.0-xenial | https://ci.sociomantic.com/ubuntu/stable xenial/main amd64 Packages
libtangort-dmd-dev | 1.7.0-xenial | https://dl.bintray.com/sociomantic-tsunami/dlang xenial/release amd64 Packages
libtangort-dmd-dev | 1.7.0-xenial | https://ci.sociomantic.com/ubuntu/devel xenial-devel/main amd64 Packages
libtangort-dmd-dev | 1.6.1+11~b25c793-xenial | https://ci.sociomantic.com/ubuntu/devel xenial-devel/main amd64 Packages
libtangort-dmd-dev | 1.6.1+7~4a76e5f-xenial | https://ci.sociomantic.com/ubuntu/devel xenial-devel/main amd64 Packages
libtangort-dmd-dev | 1.6.1-xenial | https://ci.sociomantic.com/ubuntu/stable xenial/main amd64 Packages
libtangort-dmd-dev | 1.6.1-xenial | https://dl.bintray.com/sociomantic-tsunami/dlang xenial/release amd64 Packages
libtangort-dmd-dev | 1.6.0-xenial | https://ci.sociomantic.com/ubuntu/stable xenial/main amd64 Packages
''',
            },
            'dmd-bin': {
                'versions': (
                    ('2.070.x', '2.070.2-0'),
                    ('2.70.x', ExitError(1, 'No versions compatible with 2.70.x found in apt for dmd-bin')),
                ),
                'output': '''\
   dmd-bin |  2.074.0-0 | http://master.dl.sourceforge.net/project/d-apt d-apt/main amd64 Packages
   dmd-bin |  2.073.2-0 | http://master.dl.sourceforge.net/project/d-apt d-apt/main amd64 Packages
   dmd-bin |  2.073.1-0 | http://master.dl.sourceforge.net/project/d-apt d-apt/main amd64 Packages
   dmd-bin |  2.073.0-0 | http://master.dl.sourceforge.net/project/d-apt d-apt/main amd64 Packages
   dmd-bin |  2.072.2-0 | http://master.dl.sourceforge.net/project/d-apt d-apt/main amd64 Packages
   dmd-bin |  2.072.1-0 | http://master.dl.sourceforge.net/project/d-apt d-apt/main amd64 Packages
   dmd-bin |  2.072.0-0 | http://master.dl.sourceforge.net/project/d-apt d-apt/main amd64 Packages
   dmd-bin |  2.071.2-0 | http://master.dl.sourceforge.net/project/d-apt d-apt/main amd64 Packages
   dmd-bin |  2.071.1-0 | http://master.dl.sourceforge.net/project/d-apt d-apt/main amd64 Packages
   dmd-bin |  2.071.0-0 | http://master.dl.sourceforge.net/project/d-apt d-apt/main amd64 Packages
   dmd-bin |  2.070.2-0 | http://master.dl.sourceforge.net/project/d-apt d-apt/main amd64 Packages
   dmd-bin |  2.070.1-0 | http://master.dl.sourceforge.net/project/d-apt d-apt/main amd64 Packages
   dmd-bin |  2.070.0-0 | http://master.dl.sourceforge.net/project/d-apt d-apt/main amd64 Packages
   dmd-bin |  2.069.2-0 | http://master.dl.sourceforge.net/project/d-apt d-apt/main amd64 Packages
   dmd-bin |  2.069.1-0 | http://master.dl.sourceforge.net/project/d-apt d-apt/main amd64 Packages
   dmd-bin |  2.069.0-0 | http://master.dl.sourceforge.net/project/d-apt d-apt/main amd64 Packages
   dmd-bin |  2.068.2-0 | http://master.dl.sourceforge.net/project/d-apt d-apt/main amd64 Packages
   dmd-bin |  2.068.1-0 | http://master.dl.sourceforge.net/project/d-apt d-apt/main amd64 Packages
   dmd-bin |  2.068.0-0 | http://master.dl.sourceforge.net/project/d-apt d-apt/main amd64 Packages
   dmd-bin |  2.067.1-0 | http://master.dl.sourceforge.net/project/d-apt d-apt/main amd64 Packages
   dmd-bin |  2.067.0-0 | http://master.dl.sourceforge.net/project/d-apt d-apt/main amd64 Packages
   dmd-bin |  2.066.1-0 | http://master.dl.sourceforge.net/project/d-apt d-apt/main amd64 Packages
   dmd-bin |  2.065.0-0 | http://master.dl.sourceforge.net/project/d-apt d-apt/main amd64 Packages
   dmd-bin |  2.064.2-0 | http://master.dl.sourceforge.net/project/d-apt d-apt/main amd64 Packages
''',
            },
            'fake-pkg': {
                'versions': (
                    ('1.0.x', ExitError(1, 'No versions found in apt for fake-pkg')),
                ),
                'output': '',
            }
        },
        'gem': {
            'fpm': {
                'versions': (
                    ('', '1.8.1'),
                    ('1', '1.8.1'),
                    ('1.x', '1.8.1'),
                    ('1.8', '1.8.1'),
                    ('1.8.x', '1.8.1'),
                    ('1.8.0', '1.8.0'),
                    ('1.6', '1.6.3'),
                    ('0.x', '0.4.42'),
                    ('0.3.x', '0.3.11'),
                    ('0.3.12', ExitError(1, 'No versions compatible with 0.3.12 found in gem for fpm')),
                    ('2.x', ExitError(1, 'No versions compatible with 2.x found in gem for fpm')),
                ),
                'output': '''\


*** REMOTE GEMS ***

fpm (1.8.1, 1.8.0, 1.7.0, 1.6.3, 1.6.2, 1.6.1, 1.6.0, 1.5.0, 1.4.0, 1.3.3, 1.3.2, 1.3.0, 1.2.0, 1.1.0, 1.0.2, 1.0.1, 1.0.0, 0.4.42, 0.4.41, 0.4.40, 0.4.39, 0.4.38, 0.4.37, 0.4.36, 0.4.35, 0.4.32, 0.4.31, 0.4.30, 0.4.29, 0.4.28, 0.4.27, 0.4.26, 0.4.25, 0.4.24, 0.4.23, 0.4.22, 0.4.21, 0.4.20, 0.4.19, 0.4.18, 0.4.17, 0.4.16, 0.4.15, 0.4.14, 0.4.13, 0.4.12, 0.4.11, 0.4.10, 0.4.9, 0.4.8, 0.4.6, 0.4.5, 0.4.4, 0.4.3, 0.4.2, 0.4.1, 0.4.0, 0.3.11, 0.3.10, 0.3.9, 0.3.8, 0.3.7, 0.3.6, 0.3.4, 0.3.3, 0.3.2, 0.3.1, 0.2.35, 0.2.34, 0.2.33, 0.2.32, 0.2.31, 0.2.30, 0.2.29, 0.2.28, 0.2.27, 0.2.26, 0.2.25, 0.2.24, 0.2.23, 0.2.22, 0.2.21, 0.2.20, 0.2.19, 0.2.18, 0.2.17, 0.2.16, 0.2.15, 0.2.14, 0.2.13, 0.2.12, 0.2.11, 0.2.10, 0.2.9, 0.2.8, 0.2.7, 0.2.6, 0.2.5, 0.2.4, 0.2.3, 0.2.2, 0.2.1, 0.2.0, 0.1.9, 0.1.7, 0.1.6, 0.1.5, 0.1.4, 0.1.3, 0.1.1, 0.1.0)
''',
            },
        },
    }

    # Monkey-patch functions for testing
    def get_test_output(self, pkg):
        return tool_tests[self.name][pkg]['output']
    AptTool.get_tool_output = get_test_output
    GemTool.get_tool_output = get_test_output

    for tool, pkg_tests in tool_tests.items():
        for pkg, test in pkg_tests.items():
            for requested, expected in test['versions']:
                run_test([tool, pkg, requested], expected)


if __name__ == '__main__':
    try:
        main(sys.argv)
    except ExitError as e:
        sys.stderr.write(e.message + "\n")
        sys.exit(e.statuscode)


