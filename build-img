#!/bin/sh
# Copyright dunnhumby Germany GmbH 2017.
# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE.txt or copy at
# http://www.boost.org/LICENSE_1_0.txt)
set -eu

print_usage() {
	cat <<HELP
Usage: $0 [options] IMAGE [BUILD ARGS]

Builds a docker IMAGE. IMAGE is expected to be in the form:
  ORG/REPO:DIST-TAG
Where ORG is the DockerHub organization, REPO is the name of the DockerHub
image repository, TAG is the logical tag for the image version, and DIST is the
distro to use as the base Ubuntu. The Dockerfile file name is expected to be in
the form REPO.Dockerfile and a temporary Dockerfile will be generated based on
this one.

Optional BUILD_ARGS are passed blindly to docker build.

Options:

-V VERSION
    Set a more specific version to the image.
-h
    Show this help message and exit.

Examples:

# builds sociomantictsunami/base:v2-xenial image based on base.Dockerfile
$0 sociomantictsunami/base:v2-xenial
HELP
}

# Parse arguments
version=
while getopts V:h flag
do
    case $flag in
        V)  version="$OPTARG";;
        h)  print_usage ; exit 0;;
        \?) echo >&2; print_usage >&2; exit 2;;
    esac
done
shift `expr $OPTIND - 1`

test $# -ge 1 || {
	print_usage >&2
	echo >&2
	echo "We need at least one argument: IMAGE (got none)!" >&2
	exit 2
}

image="$1"
shift

# Calculated options
re='^\([^/]\+\)/\([^:]\+\):\([^-]\+\)-\(.*\)$'
org="$(echo $image | sed "s|$re|\\1|")"
repo="$(echo $image | sed "s|$re|\\2|")"
dist="$(echo $image | sed "s|$re|\\3|")"
tag="$(echo $image | sed "s|$re|\\4|")"
if test -z "$version"
then
	version="$tag"
fi

# Create temporary Dockerfile
dockerfile="$repo.Dockerfile"
tmpdockerfile="$dockerfile.$tag-$dist.tmp"
cp "$dockerfile" "$tmpdockerfile"
trap "ret=\$?; rm -f '$tmpdockerfile'; exit \$ret" INT TERM QUIT EXIT
sed -i 's/^\(FROM\s\+.\+\)$/\1:'"$dist"'/;
	/'"$org"'/ s/^\(FROM\s\+.\+\)$/\1-'"$tag"'/' "$tmpdockerfile"

# If the base image is not from $org, we assume it's external and it should be
# pulled
build_flags=
if ! grep -Pq '^FROM\s+'"$org/" "$dockerfile"
then
	build_flags="--pull"
fi

# Build image
(
	set -x
	docker build $build_flags --build-arg VERSION_IMAGE="$version" \
		-t "$image" -f "$tmpdockerfile" "$@" .
)
